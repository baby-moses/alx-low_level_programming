!<arch>
0-isupper.c/    0           0     0     644     245       `
#include "main.h"


/**

 * _isupper - writes the character c to stdout

 * @c: The character check

 * Return: 1 if upper 0  if lower.

 */

int _isupper(int c)

{

	if (c < 65 || c > 90)

	{

		return (0);

	}

	else

	{

		return (1);

	}

}

0-strcat.c/     0           0     0     644     560       `
#include "main.h"

/**

 * _strlen - returns the length of string

 * @s: string to return length

 * Return: length of @s

 */

int _strlen(char *s)

{

	int length = 0;


	while (*s++)

		length++;

	return (length);

}


/**

 * _strcat - appends a string to another

 * @src: string to append

 * @dest: string to append to

 * Return: appended string

 */

char *_strcat(char *dest, char *src)

{

	int dest_len = _strlen(dest);

	int i;


	for (i = 0; src[i] != '\0'; i++)

		dest[dest_len + i] = src[i];

	dest[dest_len + i] = '\0';

	return (dest);

}
1-isdigit.c/    0           0     0     644     242       `
#include "main.h"


/**

 * _isdigit - writes the character c to stdout

 * @c: The character check

 * Return: 1 if digit else 0.

 */

int _isdigit(int c)

{

	if (c >= 48 && c <= 57)

	{

		return (1);

	}

	else

	{

		return (0);

	}

}
1-strncat.c/    0           0     0     644     663       `
#include "main.h"

/**

 * _strlen - returns the length of string

 * @s: string to return length

 * Return: length of @s

 */

int _strlen(char *s)

{

	int length = 0;


	while (*s++)

		length++;

	return (length);

}

/**

 * _strncat - appends not more than @n characters

 * @dest: string @src is appended here

 * @src: string @dest is appended to

 * @n: length of string should be less than this value

 * Return: appendes string

 */

char *_strncat(char *dest, char *src, int n)

{

	int dest_len = _strlen(dest);

	int i;


	for (i = 0 ; i < n && src[i] != '\0' ; i++)

		dest[dest_len + i] = src[i];

	dest[dest_len + i] = '\0';

	return (dest);

}

2-strlen.c/     0           0     0     644     222       `
#include "main.h"

/**

 * _strlen - returns the length of string

 * @s: string to return length

 * Return: length of @s

 */

int _strlen(char *s)

{

	int length = 0;


	while (*s++)

		length++;

	return (length);

}
3-islower.c/    0           0     0     644     254       `
#include "main.h"


/**

 * _islower - checks if a character islower case

 * @c: The character to check

 * Return: 1 if lowercase 0 otherwise

 */

int _islower(int c)

{

	if (c < 97 || c > 122)

	{

		return (0);

	}

	else

	{

		return (1);

	}

}
3-strcmp.c/     0           0     0     644     515       `
#include "main.h"


/**

  * _strcmp - Compares two strings

  * @s1: The first string

  * @s2: The second string

  *

  * Return: int value

  */

int _strcmp(char *s1, char *s2)

{

	int a = 0, b = 0, c = 0, r = 0, lim;


	while (s1[a])

	{

		a++;

	}


	while (s2[b])

	{

		b++;

	}


	if (a <= b)

	{

		lim = a;

	}

	else

	{

		lim = b;

	}


	while (c <= lim)

	{

		if (s1[c] == s2[c])

		{

			c++;

			continue;

		}

		else

		{

			r = s1[c] - s2[c];

			break;

		}


		c++;

	}


	return (r);

}

4-isalpha.c/    0           0     0     644     254       `
#include "main.h"


/**

 * _isalpha - checks if a character is upper case

 * @c: The chracter to check

 * Return: 1 if uppercase 0 otherwise

 */

int _isalpha(int c)

{

	if (c < 65 || c > 122)

	{

		return (0);

	}

	else

	{

		return (1);

	}

}
5-strstr.c/     0           0     0     644     590       `
#include "main.h"


/**

 * _strstr - first occurrence of the substring needle in the string haystack

 * @haystack: main str to be examined

 * @needle: searched in haystack

 * Return: return 0

 **/


char  *_strstr(char *haystack, char *needle)

{

	char *str1, *str2; /*Declaring variables*/


	while (*haystack != '\0')

	{

		str1 = haystack; /*values*/

		str2 = needle;


		/*Star WHILE*/

		while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)

		{

			haystack++;

			str2++;

		}

		if (*str2 == '\0')

			return (str1);

		haystack = str1 + 1;

	}

	return (0);

}
9-strcpy.c/     0           0     0     644     452       `
#include "main.h"


/**

 * _strcpy - Copies a string pointed to by @src, including the

 *           terminating null byte, to a buffer pointed to by @dest.

 * @dest: A buffer to copy the string to.

 * @src: The source string to copy.

 *

 * Return: A pointer to the destination string @dest.

 */

char *_strcpy(char *dest, char *src)

{

	int index = 0;


	while (src[index])

	{

		dest[index] = src[index];

		index++;

	}


	return (dest);

}
_putchar.c/     0           0     0     644     258       `
#include <unistd.h>


/**

 * _putchar - writes the character c to stdout

 * @c: The character to print

 *

 * Return: On success 1.

 * On error, -1 is returned, and errno is set appropriately.

 */

int _putchar(char c)

{

	return (write(1, &c, 1));

}
touch/          0           0     0     644     0         `
